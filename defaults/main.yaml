---
rke_state: present
rke_version: 2
prepare_rancher_ha_nodes: true
rke_install_docker: "{{ true if rke_version==1 else false }}"
template_creation_setup: true
cluster_setup: multinode
# rke2
rke_installscript_url: https://get.rke2.io
update_packages: true
rke2_os_packages: curl
rke2_cni: canal
kubeconfig_mode_644: true
rke2_type: server
rke2_imagelist: rke2-images-all.linux-amd64.txt
rke2_imagelist_url: "https://github.com/rancher/rke2/releases/download/v{{Â rke2_k8s_version }}%2B{{ rke2_release_kind }}/{{ rke2_imagelist }}"
rke2_k8s_version: 1.23.6
rke2_version: "v{{ rke2_k8s_version }}+{{ rke2_release_kind }}"
rke2_channel: stable
rke2_channel_url: https://update.rke2.io/v1-release/channels
rke2_method: tar
enable_ingress_controller: true
rke2_config_dir: /etc/rancher/rke2
rke2_kubeconfig_name: rke2.yaml
rke2_user_name: root
rke2_task_can_possibly_fail: "{{ true if inventory_hostname in groups['additional_master_nodes'] else false }}"
rke2_user_group: root
rke2_server_service: rke2-server.service
rke2_node_register_port: 9345
k8s_api_port: 6443
rke2_uninstall_script: /usr/local/bin/rke2-uninstall.sh
rke2_fetched_kubeconfig_path: ./kubeconfig
rke2_path_to_generated_token: /var/lib/rancher/rke2/server/node-token
rke2_additional_manifests: /var/lib/rancher/rke2/server/manifests
rke2_release_kind: rke2r2
rke2_airgapped_image_url: "https://github.com/rancher/rke2/releases/download/v{{ rke2_k8s_version }}%2B{{ rke2_release_kind }}/{{ rke2_airgapped_archive }}"
rke2_airgapped_installation: true
rke2_airgapped_install_dir: /var/lib/rancher/rke2/agent/images/
rke2_airgapped_archive: rke2-images.linux-amd64.tar.zst
add_crictl_alias: true
rke2_bin_dir: /var/lib/rancher/rke2/bin/
rke2_containerd_sock: /run/k3s/containerd/containerd.sock
network_manager_config_dir: /etc/NetworkManager/conf.d
rke2_server_service_dir: /usr/local/lib/systemd/system
rke2_server_service_env_config: rke2-server.env
rke2_configure_proxy: false

operation: deploy
rke_parameter: up
rke_statefile_name: rancher-cluster.rkestate
rke_cluster_config_name: rancher-cluster.yml
path_to_kubeconfig: "{{ rancher_cluster_folder }}/kube_config_rancher-cluster.yml"
path_to_rke_statefile: "{{ rancher_cluster_folder }}/{{ rke_statefile_name }}"
path_to_rke_cluster_config: "{{ rancher_cluster_folder }}/{{ rke_cluster_config_name }}"
path_tls_crt: "{{ rancher_cluster_folder }}/tls.crt"
path_tls_key: "{{ rancher_cluster_folder }}/tls.key"
path_cacerts_pem: "{{ rancher_cluster_folder }}/cacerts.pem"

path_to_rke_installer_binary: /usr/bin/rke
path_to_kubectl_binary: /usr/bin/kubectl
install_kubectl: true
install_helm: false
install_rke_installer: true

kubectl_version: 1.14.0
helm_version: 3.8.2
rke_installer_version: 1.3.11
rke_kubernetes_version: v1.23.6-rancher1-1

kubectl_binary:
  kubectl:
    bin_name: "kubectl"
    bin_version: "{{ kubectl_version }}"
    source_url: "https://dl.k8s.io/v{{ kubectl_version }}/kubernetes-client-linux-amd64.tar.gz"
    bin_to_copy: "kubernetes/client/bin/kubectl"
    bin_dir: "{{ path_to_kubectl_binary }}"
    to_remove: "kubernetes"
    check_bin_version_before_installing: true

rke_installer_binary:
  rke:
    bin_name: "rke_linux-amd64"
    bin_version: "{{ rke_installer_version }}"
    source_url: "https://github.com/rancher/rke/releases/download/v{{ rke_installer_version }}/rke_linux-amd64"
    bin_to_copy: "rke_linux-amd64"
    bin_dir: "{{ path_to_rke_installer_binary }}"
    to_remove: ""
    check_bin_version_before_installing: true

helm_binary:
  helm:
    bin_name: "helm"
    bin_version: "{{ helm_version }}"
    source_url: "https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz"
    bin_to_copy: "linux-amd64/helm"
    bin_dir: "/usr/local/bin/helm"
    to_remove: "linux-amd64"
    check_bin_version_before_installing: true

# k3s
install_k3s: false
k3s_parameters:
  - "--write-kubeconfig-mode 644"

k3s_state: absent
k3s_installscript_url: https://get.k3s.io
k3s_k8s_version: 1.24.13
k3s_release_kind: k3s1
k3s_version: "v{{ k3s_k8s_version }}+{{ k3s_release_kind }}"
k3s_path_to_generated_token: /var/lib/rancher/k3s/server/node-token
k3s_master_ip: "{{ groups.initial_master_node | map('extract', hostvars, 'ansible_default_ipv4') | map(attribute='address') }}"
k3s_additional_nodes: "{{ groups.additional_master_nodes | map('extract', hostvars) | map(attribute='ansible_hostname') }}"
k3s_uninstall_script: /usr/local/bin/k3s-uninstall.sh
k3s_agent_uninstall_script: /usr/local/bin/k3s-agent-uninstall.sh


# conatinerd
install_containerd: false
containerd_version: 1.7.1
runc_version: 1.1.7
cni_version: 1.3.0
conatinerd_import_rke2images: false
containerd_cli: /usr/local/bin/ctr
containerd_importer_script: containerd-import-images.sh
containerd_install_url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{containerd_version }}-linux-amd64.tar.gz"
containerd_install_dest: /usr/local
containerd_service_url: https://raw.githubusercontent.com/containerd/containerd/v{{ containerd_version }}/containerd.service
containerd_service_dest: /usr/lib/systemd/system/
containerd_service_name: containerd.service
containerd_config_folder: /etc/containerd
containerd_importer_script: containerd-importer.sh
containerd_config_file: config.toml
runc_install_url: "https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64"
runc_bin_dest: /usr/local/sbin/
cni_install_url: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-amd64-v{{ cni_version }}.tgz"
cni_install_dest: /opt/cni/bin
rke2_config_dir: /etc/rancher/rke2
rke2_config_file: config.yaml
regexBinDir: '^(\s*)bin_dir =.*'
replaceBinDir: '\1bin_dir = "/var/lib/rancher/rke2/bin/"'
regexConfDir: '^(\s*)conf_dir =.*'
replaceConfDir: '\1conf_dir = "/etc/cni/net.d"'
regexRootPath: '^root ='
lineRootPath: 'root = "{{ containerdRootPath }}"'
containerdRootPath: /var/lib/containerd/
container_runtime_endpoint: unix:///run/containerd/containerd.sock
containerd_config_replacements:
  bin:
    regex: "{{ regexBinDir }}"
    replace: "{{ replaceBinDir }}"
  cni:
    regex: "{{ regexConfDir }}"
    replace: "{{ replaceConfDir }}"

containerd_directories:
  - "{{ containerd_config_folder }}"
  - "{{ cni_install_dest }}"
  - "{{ rke2_config_dir }}"
  - "{{ containerdRootPath }}"

containerd_archives:
  cni:
    url: "{{ cni_install_url }}"
    dest: "{{ cni_install_dest }}"
  containerd:
    url: "{{ containerd_install_url }}"
    dest: "{{ containerd_install_dest }}"

containerd_downloads:
  containerd_service:
    url: "{{ containerd_service_url }}"
    dest: "{{ containerd_service_dest }}"
  runc_binary:
    url: "{{ runc_install_url }}"
    dest: "{{ runc_bin_dest }}"

rke2_proxy_config: |
  HOME=/root
  # export HTTP_PROXY="http://127.0.0.1:3128"

containerd_proxy_config: |
  # Environment="HTTP_PROXY=http://127.0.0.1:3128/"

# configure containerd path
CONTAINERD_DIR: "/mnt"
KUBELET_DIR: "{{ CONTAINERD_DIR }}/kubelet"
CONTAINERD_ROOT_DIR_OLD: "/var/lib/rancher/rke2/agent"
CONTAINERD_ROOT_DIR_NEW: "{{ CONTAINERD_DIR }}/containerd-root/containerd"
CONTAINERD_STATE_DIR_OLD: "/run/k3s"
CONTAINERD_STATE_DIR_NEW: "{{ CONTAINERD_DIR }}/containerd-state/containerd"
PV_DIR_OLD: "/var/lib/rancher/rke2"
PV_DIR_NEW: "{{ CONTAINERD_DIR }}/local-path-provisioner/storage"
containerd_path:
  - "{{ KUBELET_DIR }}"
  - "{{ CONTAINERD_ROOT_DIR_OLD }}"
  - "{{ CONTAINERD_ROOT_DIR_NEW }}"
  - "{{ CONTAINERD_STATE_DIR_OLD }}"
  - "{{ CONTAINERD_STATE_DIR_NEW }}"
  - "{{ PV_DIR_OLD }}"
  - "{{ PV_DIR_NEW }}"
