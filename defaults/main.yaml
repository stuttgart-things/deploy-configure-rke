---
rke_state: present
rke_version: 2
rke_dir: "/var/lib/rancher/rke{{ rke_version }}"
validate_certs: true
prepare_rancher_ha_nodes: true
rke_install_docker: "{{ true if rke_version==1 else false }}"
rke_docker_package_version: "23.0.6"
rke_docker_version: "{% if rke_docker_package_version == '23.0.6' and ansible_os_family == 'Debian' and ansible_distribution_major_version|int == 22 %}=5:23.0.6-1~ubuntu.22.04~jammy{% elif rke_docker_package_version == '24.0.6' and ansible_os_family == 'Debian' and ansible_distribution_major_version|int == 22 %}=5:23.0.6-1~ubuntu.23.04~lunar{% else %}{% endif %}"
rke_docker_ce_version: "{% if rke_docker_package_version == '23.0.6' and ansible_os_family == 'Debian' %}5:23.0.6*{% else %}{% endif %}"
template_creation_setup: true
cluster_setup: multinode
# rke2
rke_installscript_url: https://get.rke2.io
update_packages: true
rke2_os_packages: curl
rke2_cni: cilium
kubeconfig_mode_644: true
rke2_type: server
rke2_imagelist: rke2-images-all.linux-amd64.txt
rke2_imagelist_url: "https://github.com/rancher/rke2/releases/download/v{{ rke2_k8s_version }}%2B{{ rke2_release_kind }}/{{ rke2_imagelist }}"
rke2_k8s_version: 1.30.4
rke2_version: "v{{ rke2_k8s_version }}+{{ rke2_release_kind }}"
rke2_channel: stable
rke2_channel_url: https://update.rke2.io/v1-release/channels
rke2_method: tar
disable_rke2_components:
  - rke2-ingress-nginx
rke2_config_dir: /etc/rancher/rke2
rke2_kubeconfig_name: rke2.yaml
rke2_user_name: root
rke2_task_can_possibly_fail: "{{ true if inventory_hostname in groups['additional_master_nodes'] else false }}"
rke2_user_group: root
rke2_server_service: rke2-server.service
rke2_node_register_port: 9345
k8s_api_port: 6443
rke2_uninstall_script: /usr/local/bin/rke2-uninstall.sh
rke2_fetched_kubeconfig_path: ./kubeconfig
rke2_path_to_generated_token: "{{ rke_dir }}/server/node-token"
rke2_additional_manifests_path: "{{ rke_dir }}/server/manifests"
rke2_release_kind: rke2r1 #rke2r2
rke2_airgapped_image_url: "https://github.com/rancher/rke2/releases/download/v{{ rke2_k8s_version }}%2B{{ rke2_release_kind }}/{{ rke2_airgapped_archive }}"
rke2_airgapped_installation: false
rke2_airgapped_install_dir: "{{ rke_dir }}/agent/images/"
rke2_airgapped_archive: rke2-images.linux-amd64.tar.zst
add_crictl_alias: true
rke2_bin_dir: "{{ rke_dir }}/bin/"
rke2_containerd_sock: /run/k3s/containerd/containerd.sock
network_manager_config_dir: /etc/NetworkManager/conf.d
rke2_server_service_dir: /usr/local/lib/systemd/system
rke2_server_service_env_config: rke2-server.env
rke2_configure_proxy: false

operation: deploy
rke_parameter: up
rke_statefile_name: rancher-cluster.rkestate
rke_cluster_config_name: rancher-cluster.yml
fetch_kubeconfig_local: true
path_to_kubeconfig: "{{ rancher_cluster_folder }}/kube_config_rancher-cluster.yml"
path_to_rke_statefile: "{{ rancher_cluster_folder }}/{{ rke_statefile_name }}"
path_to_rke_cluster_config: "{{ rancher_cluster_folder }}/{{ rke_cluster_config_name }}"
path_tls_crt: "{{ rancher_cluster_folder }}/tls.crt"
path_tls_key: "{{ rancher_cluster_folder }}/tls.key"
path_cacerts_pem: "{{ rancher_cluster_folder }}/cacerts.pem"

path_to_rke_installer_binary: /usr/bin/rke
path_to_kubectl_binary: /usr/bin/kubectl
install_kubectl: true
install_helm: true
install_rke_installer: true

install_cilium: false
cilium_version: 0.16.19
kubectl_version: v1.31.1
helm_version: 3.16.2
rke_installer_version: 1.4.8
rke_kubernetes_version: v1.26.7-rancher1-1

admin_group: "{% if ansible_os_family == 'RedHat' %}wheel{% else %}sudo{% endif %}"
rke_user_name: rke
additional_group: "{{ rke_user_name }}, docker"
rancher_cluster_folder: "/home/{{ rke_user_name }}/{{ rancher_cluster_name }}"
rancher_cluster_name: rancher-things
network_plugin: canal
path_to_private_key: "/root/rke_rsa"

rke_user:
  - username: "{{ rke_user_name }}"
    name: "{{ rke_user_name }} user"
    groups: ['{{ admin_group }}', '{{ additional_group }}']
    home: "/home/{{ rke_user_name }}"
    profile: |
      alias ll='ls -ahl'
    ssh_key:
      - "{{ rke_pub_key }}"
    enable_ssh_tcp_forwarding: True

kubectl_binary:
  kubectl:
    bin_name: "kubectl"
    bin_version: "{{ kubectl_version }}"
    check_bin_version_before_installing: true
    source_url: "https://dl.k8s.io/{{ kubectl_version }}/bin/linux/amd64/kubectl"
    bin_to_copy: "kubectl"
    to_remove: "kubectl"
    bin_dir: "{{ path_to_kubectl_binary }}"
    version_cmd: " version --client"
    target_version: "{{ kubectl_version }}"

rke_installer_binary:
  rke:
    bin_name: "rke_linux-amd64"
    bin_version: "{{ rke_installer_version }}"
    source_url: "https://github.com/rancher/rke/releases/download/v{{ rke_installer_version }}/rke_linux-amd64"
    bin_to_copy: "rke_linux-amd64"
    bin_dir: "{{ path_to_rke_installer_binary }}"
    to_remove: ""
    check_bin_version_before_installing: true

cilium_binary:
  cilium:
    bin_name: cilium
    bin_version: "{{ cilium_version }}"
    check_bin_version_before_installing: true
    source_url: "https://github.com/cilium/cilium-cli/releases/download/v{{ cilium_version }}/cilium-linux-amd64.tar.gz"
    bin_to_copy: cilium
    to_remove: ""
    bin_dir: "/usr/bin/cilium"
    version_cmd: "version"
    target_version: "{{ cilium_version }}"

helm_binary:
  helm:
    bin_name: "helm"
    bin_version: "{{ helm_version }}"
    check_bin_version_before_installing: true
    source_url: "https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz"
    bin_to_copy: "linux-amd64/helm"
    to_remove: "linux-amd64"
    bin_dir: "/usr/local/bin"
    version_cmd: " version"
    target_version: "{{ helm_version }}"


# k3s
install_k3s: false
k3s_state: absent
k3s_installscript_url: https://get.k3s.io
k3s_k8s_version: 1.24.13
k3s_release_kind: k3s1
k3s_version: "v{{ k3s_k8s_version }}+{{ k3s_release_kind }}"
k3s_path_to_generated_token: /var/lib/rancher/k3s/server/node-token
k3s_master_ip: "{{ groups.initial_master_node | map('extract', hostvars, 'ansible_default_ipv4') | map(attribute='address') }}"
k3s_additional_nodes: "{{ groups.additional_master_nodes | map('extract', hostvars) | map(attribute='ansible_hostname') }}"
k3s_uninstall_script: /usr/local/bin/k3s-uninstall.sh
k3s_agent_uninstall_script: /usr/local/bin/k3s-agent-uninstall.sh
k3s_config_template: k3s-config.yaml.j2
k3s_config_path: /tmp/k3s-cluster.yaml
k3s_config_dir: /etc/rancher/k3s
k3s_config_name: k3s-config.yaml
k3s_kubeconfig_path: /etc/rancher/k3s/k3s.yaml
k3s_config:
  flannel_backend: none
  disable_kube_proxy: true
  disable_network_policy: true
  cluster_init: true
  disable:
    - servicelb
    - traefik

cilium_api_server_ip: "{{ ansible_default_ipv4.address }}"
cilium_api_server_port: 6443
cilium_kube_proxy_replacement: true
cilium_operator_replicas: 1

create_root_cert: true
root_cert_dir: /etc/rancher/k3s/
root_cert_subject: "/CN=stuttgart-things"
root_ca: "{{ root_cert_dir }}/root-ca.pem"
root_ca_key: "{{ root_cert_dir }}/root-ca-key.pem"
# conatinerd
install_containerd: false
containerd_version: 1.7.1
runc_version: 1.1.7
cni_version: 1.3.0
conatinerd_import_rke2images: false
containerd_cli: /usr/local/bin/ctr
containerd_importer_script: containerd-import-images.sh
containerd_install_url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{containerd_version }}-linux-amd64.tar.gz"
containerd_install_dest: /usr/local
containerd_service_url: https://raw.githubusercontent.com/containerd/containerd/v{{ containerd_version }}/containerd.service
containerd_service_dest: /usr/lib/systemd/system/
containerd_service_name: containerd.service
containerd_config_folder: /etc/containerd
containerd_importer_script: containerd-importer.sh
containerd_config_file: config.toml
runc_install_url: "https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64"
runc_bin_dest: /usr/local/sbin/
cni_install_url: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-amd64-v{{ cni_version }}.tgz"
cni_install_dest: /opt/cni/bin
rke2_config_dir: /etc/rancher/rke2
rke2_config_file: config.yaml
regexBinDir: '^(\s*)bin_dir =.*'
replaceBinDir: '\1bin_dir = "/var/lib/rancher/rke2/bin/"'
regexConfDir: '^(\s*)conf_dir =.*'
replaceConfDir: '\1conf_dir = "/etc/cni/net.d"'
regexRootPath: '^root ='
lineRootPath: 'root = "{{ containerdRootPath }}"'
containerdRootPath: /var/lib/containerd/
container_runtime_endpoint: unix:///run/containerd/containerd.sock
containerd_config_replacements:
  bin:
    regex: "{{ regexBinDir }}"
    replace: "{{ replaceBinDir }}"
  cni:
    regex: "{{ regexConfDir }}"
    replace: "{{ replaceConfDir }}"

CUSTOM_CONTAINERD_DATA_DIRectories:
  - "{{ containerd_config_folder }}"
  - "{{ cni_install_dest }}"
  - "{{ rke2_config_dir }}"
  - "{{ containerdRootPath }}"

containerd_archives:
  cni:
    url: "{{ cni_install_url }}"
    dest: "{{ cni_install_dest }}"
  containerd:
    url: "{{ containerd_install_url }}"
    dest: "{{ containerd_install_dest }}"

containerd_downloads:
  containerd_service:
    url: "{{ containerd_service_url }}"
    dest: "{{ containerd_service_dest }}"
  runc_binary:
    url: "{{ runc_install_url }}"
    dest: "{{ runc_bin_dest }}"

rke2_proxy_config: |
  HOME=/root
  # export HTTP_PROXY="http://127.0.0.1:3128"

containerd_proxy_config: |
  # Environment="HTTP_PROXY=http://127.0.0.1:3128/"

# configure containerd path
configure_rke2containerd_paths: false
custom_containerd_data_dir: "/mnt"
kubelet_dir: "{{ custom_containerd_data_dir }}/kubelet"
containerd_root_dir_default: "/var/lib/rancher/rke2/agent"
containerd_root_dir_custom: "{{ custom_containerd_data_dir }}/containerd-root/containerd"
containerd_state_dir_default: "/run/k3s"
containerd_state_dir_custom: "{{ custom_containerd_data_dir }}/containerd-state/containerd"
pv_dir_default: "/var/lib/rancher/rke2"
pv_dir_custom: "{{ custom_containerd_data_dir }}/local-path-provisioner/storage"
containerd_paths:
  - "{{ kubelet_dir }}"
  - "{{ containerd_root_dir_default }}"
  - "{{ containerd_root_dir_custom }}"
  - "{{ containerd_state_dir_default }}"
  - "{{ containerd_state_dir_custom }}"
  - "{{ pv_dir_default }}"
  - "{{ pv_dir_custom }}"

deploy_helm_charts: false
helm_state: present

rke2_config: rke2-config.yaml.j2
helm_template: helm-chart-config.yaml.j2
helmChartConfig:
  cilium:
    name: rke2-cilium
    namespace: kube-system
    release_values: "{{ values_cilium }}"

values_cilium: |
  ---
  eni:
    enabled: true
