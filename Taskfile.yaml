---
version: 3
vars:
  PROJECT:
    sh: echo ${PROJECT}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  DAGGER_ANSIBLE_MODULE: github.com/stuttgart-things/dagger/ansible
  DAGGER_ANSIBLE_MODULE_VERSION: v0.1.2

# PRECONDITION TO CHECK IF THE VIRTUAL ENVIRONMENT IS ACTIVATED
venv-precondition: &venv
  - sh: |
      pip -V | grep '.venv' >/dev/null 2>&1
    msg: "The pip version output does not contain .venv, Halting. Run task setup-molecule and/or source ansible/.venv/bin/activate"

tasks:
  do:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' Taskfile.yaml | sed 's/^- //' | gum choose)
        task ${task}

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  run-molecule:
    preconditions: *venv
    cmds:
      - |
        COLLECTION_NAME=$(gum choose "baseos" "container" "awx" )

        molecule test -s ${COLLECTION_NAME}

  switch-remote:
    desc: Switch to remote branch
    cmds:
      - |
        git fetch
        branches=($(git branch -r | grep -v 'origin/HEAD' | sed 's|origin/||'))
        branch=$(printf "%s\n" "${branches[@]}" | gum choose)
        git switch -c ${branch} --track origin/${branch}
        git branch && git status

  switch-local:
    desc: Switch to local branch
    cmds:
      - |
        branches=$(git branch -a | grep -v 'remotes')
        branch=$(printf "%s\n" "${branches[@]}" | gum choose)
        git checkout ${branch} && git pull

  create-release:
    desc: Create release on github w/ artifact
    cmds:
      - gh release create {{ .COLLECTION }}-{{ .VERSION }} --notes "released artifact for {{ .COLLECTION }}" {{ .PACKAGE }}
    vars:
      VERSION:
        sh: echo {{ .PACKAGE }} | awk -F'-' '{print $NF}' | awk -F'.tar.gz' '{print $1}'
      COLLECTION:
        sh: echo "{{ .PACKAGE }}" | grep -oE '[^/]+-[0-9]+\.[0-9]+\.[0-9]+' | sed 's/-[0-9]\+\.[0-9]\+\.[0-9]\+$//'

# PACKAGE=/tmp/ansible/collections/artifacts/sthings-baseos-25.4.1100.tar.gz task create-release
  build-collection:
    desc: Build ansible collection
    cmds:
      - |
        echo "CHOOSE TO BE BUILD COLLECTION:"
        COLLECTION=$(gum choose {{ .ALL_COLLECTIONS }})

        rm -rf {{ .WIP_DIR }}/*
        dagger call -m {{ .DAGGER_ANSIBLE_MODULE }}@{{ .DAGGER_ANSIBLE_MODULE_VERSION }} init-collection --src {{ .SOURCE_COLLECTION_PATH }}/${COLLECTION} --progress plain export --path={{ .WIP_DIR }}
        echo "INITIALIZED COLLECTION DIR IN: {{ .WIP_DIR }}/{{ .NAMESPACE }}/${COLLECTION}" && ls -lta {{ .WIP_DIR }}/{{ .NAMESPACE }}/${COLLECTION}

        rm -rf {{ .BUILD_DIR }}/*
        dagger call -m {{ .DAGGER_ANSIBLE_MODULE }}@{{ .DAGGER_ANSIBLE_MODULE_VERSION }} modify-role-includes --src {{ .WIP_DIR }}/{{ .NAMESPACE }}/${COLLECTION} --progress plain export --path {{ .BUILD_DIR }}
        echo "MODIFIED COLLECTION IN: {{ .BUILD_DIR }}" && ls -lta {{ .BUILD_DIR }}

        rm -rf {{ .OUTPUT_DIR }}/*
        dagger call -m {{ .DAGGER_ANSIBLE_MODULE }}@{{ .DAGGER_ANSIBLE_MODULE_VERSION }} build --src {{ .BUILD_DIR }} --progress plain export --path {{ .OUTPUT_DIR }}

        ARTIFACT_PATH=$(ls {{ .OUTPUT_DIR }}/*tar.gz)
        RELEASE_TAG=$(basename "${ARTIFACT_PATH}" .tar.gz)

        echo package ${ARTIFACT_PATH} --tag ${RELEASE_TAG}

        ansible-galaxy collection install $(ls {{ .OUTPUT_DIR }}/*tar.gz)

        dagger call --progress plain -m github.com/sagikazarmark/daggerverse/gh@main \
        release create --repo {{ .GH_REPO }} \
        --token=env:GITHUB_TOKEN \
        --files ${ARTIFACT_PATH} \
        --notes "release ${RELEASE_TAG}" \
        --tag ${RELEASE_TAG} \
        --title ${RELEASE_TAG}
    vars:
      NAMESPACE: sthings
      SOURCE_COLLECTION_PATH: ./collections
      COLLECTION_BUILD_DIR: /home/sthings/projects/ansible/ansible/collections
      COLLECTION_TMP_DIR: /tmp/ansible/collections
      WIP_DIR: "{{ .COLLECTION_TMP_DIR }}/wip"
      BUILD_DIR: "{{ .COLLECTION_TMP_DIR }}/build/"
      OUTPUT_DIR: "{{ .COLLECTION_TMP_DIR }}/artifacts/"
      ALL_COLLECTIONS:
        sh: ls {{ .SOURCE_COLLECTION_PATH }} | xargs -n1 printf '"%s" '
      GH_REPO: stuttgart-things/ansible

  check:
    desc: "Run pre-commit hooks"
    cmds:
      - pre-commit autoupdate
      - pre-commit run -a

  setup-molecule:
    preconditions: *venv
    cmds:
      - pip install -U setuptools pip 'molecule'
      - pip install molecule-docker
      - pip install netaddr
      - molecule --version
      - ansible-galaxy collection install community.docker

  setup-venv:
    desc: "Setup python virtual environment"
    cmds:
      - rm -rf ./.venv
      - python3 -m venv ./.venv
      - echo "DON'T FORGET TO RUN - source .venv/bin/activate"

  commit:
    desc: Commit + push code into branch
    deps:
      - check
    cmds:
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - git status
      - |
        git add *
        git status
        if [[ -n $(git status --porcelain) ]]; then
          echo "Review the changes above."
          gum confirm "Do you want to commit these changes?" || exit 0

          echo "ENTER COMMIT MESSAGE"
          COMMIT_MESSAGE=$(gum choose "CUSTOM MESSAGE" "feat: {{ .BRANCH }}" "fix: {{ .BRANCH }}" "BREAKING CHANGE: {{ .BRANCH }}")

          if [ "$COMMIT_MESSAGE" == "CUSTOM MESSAGE" ]; then
            CHANGED_FILES=$(git status --short | awk '{print $2}' | tr '\n' ' ')
            COMMIT_MESSAGE=$(gum input --placeholder "Commit message" --value "Changed: $CHANGED_FILES")
          fi

          git commit --allow-empty -a -m "$COMMIT_MESSAGE"
        else
          echo "No changes to commit."
        fi
      - git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - |
        if gh pr list | grep -q "{{.BRANCH}}"; then
          echo "⚠️ PR already exists for branch {{.BRANCH}}, closing it..."
          gh pr close {{.BRANCH}}
        else
          echo "✅ No existing PR found for branch {{.BRANCH}}."
        fi
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 20s
      - gh pr checks $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull
